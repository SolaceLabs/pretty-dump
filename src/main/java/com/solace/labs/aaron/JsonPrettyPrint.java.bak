package com.solace.labs.aaron;

import java.lang.reflect.Field;
import java.util.LinkedHashMap;
import java.util.Map;

import org.fusesource.jansi.Ansi;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

public class JsonPrettyPrint {

	
	public static JSONObject orderedJson(String json) {
        JSONObject jsonObject = new JSONObject(json) {
            /**
             * changes the value of JSONObject.map to a LinkedHashMap in order to maintain
             * order of keys.
             */
            @Override
            public JSONObject put(String key, Object value) throws JSONException {
                try {
                    Field map = JSONObject.class.getDeclaredField("map");
                    map.setAccessible(true);
                    Object mapValue = map.get(this);
                    if (!(mapValue instanceof LinkedHashMap)) {
                        map.set(this, new LinkedHashMap<>());
                    }
                } catch (NoSuchFieldException | IllegalAccessException e) {
                    throw new RuntimeException(e);
                }
                return super.put(key, value);
            }
        };
        return jsonObject;
	}
	
	public static JSONObject orderedJson(Map<?,?> source) {
        JSONObject jsonObject = new JSONObject(source	) {
            /**
             * changes the value of JSONObject.map to a LinkedHashMap in order to maintain
             * order of keys.
             */
            @Override
            public JSONObject put(String key, Object value) throws JSONException {
                try {
                    Field map = JSONObject.class.getDeclaredField("map");
                    map.setAccessible(true);
                    Object mapValue = map.get(this);
                    if (!(mapValue instanceof LinkedHashMap)) {
                        map.set(this, new LinkedHashMap<>());
                    }
                } catch (NoSuchFieldException | IllegalAccessException e) {
                    throw new RuntimeException(e);
                }
                return super.put(key, value);
            }
        };
        return jsonObject;
	}

	
	
	private static String indent(int amount) {
		StringBuilder sb = new StringBuilder();
		for (int i=0; i<amount; i++) {
			sb.append(' ');
		}
		return sb.toString();
	}
	
	private static String printObject(JSONObject jo, int indent, int indentFactor) {
        
		StringBuilder sb = new StringBuilder().append(indent(indent)).append('{');
		if (indentFactor > 0) sb.append('\n');
		
		int count = 0;
        for (String key : jo.keySet()) {
        	Ansi ansi = new Ansi();
        	sb.append(indent(indent + indentFactor)).append(ansi.fgBrightBlue().a("\"" + key + "\"").reset().a(":"));
    		if (indentFactor > 0) sb.append(' ');

        	Object o = jo.get(key);
            ansi = new Ansi();
        	if (o instanceof CharSequence) {  // String
            	sb.append(ansi.fgBrightGreen().a("\"" + o + "\""));
        	} else if (o instanceof Number) {  // number
            	sb.append(ansi.fgBrightCyan().a(o));
        	} else if (o instanceof Boolean) {
            	sb.append(ansi.fgBrightMagenta().a(o));
        	} else if (o instanceof JSONArray) {
        		sb.append(printArray((JSONArray)o, indent + indentFactor, indentFactor));
        	} else if (o instanceof JSONObject) {
        		sb.append(printObject((JSONObject)o, indent + indentFactor, indentFactor));
        	} else if (o == JSONObject.NULL) {
            	sb.append(ansi.fgBrightRed().a("null"));
        	} else {
        		
        	}
            ansi = new Ansi();
//        	sb.append(ansi.reset().a(",\n"));
        	sb.append(ansi.reset().a(count < jo.length()-1 ? "," : ""));
    		if (indentFactor > 0) sb.append('\n');
        	count++;
        }
        return(sb.append(indent(indent)).append("}").toString());
		
	}
	
	private static String printArray(JSONArray ja, int indent, int indentFactor) {
		StringBuilder sb = new StringBuilder("[");
		if (indentFactor > 0) sb.append('\n');
		
		for (int i = 0; i<ja.length(); i++) {
			Object o = ja.get(i);
            Ansi ansi = new Ansi();
        	if (o instanceof CharSequence) {  // String
            	sb.append(indent(indent + indentFactor)).append(ansi.fgBrightGreen().a("\"" + o + "\""));
        	} else if (o instanceof Number) {  // number
            	sb.append(indent(indent + indentFactor)).append(ansi.fgBrightCyan().a(o));
        	} else if (o instanceof Boolean) {
            	sb.append(indent(indent + indentFactor)).append(ansi.fgBrightMagenta().a(o));
        	} else if (o instanceof JSONArray) {
        		sb.append(printArray((JSONArray)o, indent + indentFactor, indentFactor));
        	} else if (o instanceof JSONObject) {
        		sb.append(printObject((JSONObject)o, indent + indentFactor, indentFactor));
        		
        	} else if (o == JSONObject.NULL) {
            	sb.append(indent(indent + indentFactor)).append(ansi.fgBrightRed().a("null"));
        		
        	} else if (o instanceof Map) {
        		Map<?,?> map = (Map<?,?>)o;
        		JSONObject jo = JsonPrettyPrint.orderedJson(map);
        		sb.append(printObject(jo, indent + indentFactor, indentFactor));
        	} else {
        		
        	}
            ansi = new Ansi();
        	sb.append(ansi.reset().a(i < ja.length()-1 ? "," : ""));
    		if (indentFactor > 0) sb.append('\n');
        }
        return(sb.append(indent(indent)).append("]").toString());
		
		
	}
	
	
	
	public static String pretty(JSONObject jo, int indent) {
		String s = printObject(jo, 0, indent);
//        AnsiConsole.systemInstall();
//        System.out.println(s);
//        AnsiConsole.systemUninstall();	                        
        
        return s;
//        return printObject(jo, 0, 4);
        
        
        
		
		
		
	}
	
	
	
/*
    public Writer write(Writer writer, int indentFactor, int indent, JSONObject obj)
            throws JSONException {
        try {
            boolean needsComma = false;
            final int length = obj.length();
            writer.write('{');

            if (length == 1) {
            	final Entry<String,?> entry = obj.entrySet().iterator().next();
                final String key = entry.getKey();
                writer.write(quote(key));
                writer.write(':');
                if (indentFactor > 0) {
                    writer.write(' ');
                }
                try{
                    writeValue(writer, entry.getValue(), indentFactor, indent);
                } catch (Exception e) {
                    throw new JSONException("Unable to write JSONObject value for key: " + key, e);
                }
            } else if (length != 0) {
                final int newIndent = indent + indentFactor;
                for (final Entry<String,?> entry : this.entrySet()) {
                    if (needsComma) {
                        writer.write(',');
                    }
                    if (indentFactor > 0) {
                        writer.write('\n');
                    }
                    indent(writer, newIndent);
                    final String key = entry.getKey();
                    writer.write(quote(key));
                    writer.write(':');
                    if (indentFactor > 0) {
                        writer.write(' ');
                    }
                    try {
                        writeValue(writer, entry.getValue(), indentFactor, newIndent);
                    } catch (Exception e) {
                        throw new JSONException("Unable to write JSONObject value for key: " + key, e);
                    }
                    needsComma = true;
                }
                if (indentFactor > 0) {
                    writer.write('\n');
                }
                indent(writer, indent);
            }
            writer.write('}');
            return writer;
        } catch (IOException exception) {
            throw new JSONException(exception);
        }
    }
*/
		
}
